import { Injectable } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import 'rxjs/add/operator/catch';

import { Author } from './author';
import { Book } from '../book/book';

import { environment } from '../../environments/environment';
const API_URL = environment.apiURL;
const authors = '/authors';
const books = '/books';

/**
* The service provider for everything related to authors
*/
@Injectable()
export class AuthorService {

    /**
    * The headers sent in every request to the API
    */
    headers = new HttpHeaders({
        'Access-Control-Allow-Origin': '*'
    });

    /**
    * Constructor of the service
    * @param http The HttpClient - This is necessary in order to perform requests
    */
    constructor(private http: HttpClient) { }

    /**
    * Retrieves the list of authors in the BookStore
    * @returns The list of authors
    */
    getAuthors(): Observable<Author[]> {
        return this.http.get<Author[]>(API_URL + authors, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * Retrieves the information of an author from the BookStore
    * @param authorId The id of the author
    * @returns The author details
    */
    getAuthor(authorId): Observable<Author> {
        return this.http.get<Author>(API_URL + authors + '/' + authorId, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * Returns the Observable object with the books of an author retrieved from the API
    * @param authorId The id of the author
    * @returns The author's books
    */
    getBooksOfAuthor(authorId): Observable<Book[]> {
        return this.http.get<Book[]>(API_URL + authors + '/' + authorId + books, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * Creates an author
    * @param author The new author
    * @returns The confirmation that the author was created
    */
    createAuthor(author): Observable<boolean> {
        return this.http.post<boolean>(API_URL + authors, author, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * Updates an author
    * @param author The author's information updated
    * @returns The confirmation that the author was updated
    */
    updateAuthor(author): Observable<boolean> {
        return this.http.put<boolean>(API_URL + authors + '/' + author.id, author, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * Deletes an author and all their books from the BookStore
    * @param authorId The id of the author
    * @returns The confirmation that the author and all their books was deleted
    */
    deleteAuthor(authorId): Observable<boolean> {
        return this.http.delete<boolean>(API_URL + authors + '/' + authorId, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * Updates the list of books authored by an author
    * @param list The list of the author's books
    * @param authorId The id of the author
    * @returns The confirmation that the list of books of the author was updated
    */
    updateBooks(list, authorId): Observable<boolean> {
        return this.http.put<boolean>(API_URL + authors + '/' + authorId + books, list, { headers: this.headers }).catch(err => this.handleError(err));
    }

    /**
    * The function which handles the errors generated by the requests
    * @param error The error which the API REST returned
    */
    private handleError(error: any) {
        return throwError(error.error.errorMessage);
    }
}
